syntax = "proto3";

// 指定模板类的名称，名称必须是有实际业务意义的
option java_outer_classname = "TestProto";
option java_package = "pto";

enum Types{
  USER = 0;
  C2S_LOGIN = 1;
  S2C_LOGIN = 2;

  C2S_REGISTER = 3;
  S2C_REGISTER = 4;
  C2S_UPDATEPWD = 5;
  S2C_UPDATEPWD = 6;
  C2S_UPDATEEMAIL = 7;
  S2C_UPDATEEMAIL = 8;
  C2S_UPDATEALL = 9;
  S2C_UPDATEALL = 10;
  C2S_UPDATETEL = 11;
  S2C_UPDATETEL = 12;
  C2S_BINDMAILBOX = 13;
  S2C_BINDMAILBOX = 14;
  C2S_CHECKMAILBOX = 15;
  S2C_CHECKMAILBOX = 16;

  S2C_CONS_TAKE_TASK = 17;
  C2S_CONS_TAKE_TASK = 18;

  S2C_CONS_START_TASK = 19;
  C2S_CONS_START_TASK = 20;

  S2C_CONS_END_TASK = 21;
  C2S_CONS_END_TASK = 22;

  S2C_CNS_DEL_TASK = 23;
  C2S_CNS_DEL_TASK = 24;

  S2C_CONS_ALL_GET_TASKS = 25;
  C2S_CONS_ALL_GET_TASKS = 26;


  S2C_PROD_START_TASK = 35;
  C2S_PROD_START_TASK = 36;

  S2C_PROD_ADD_TASK = 37;
  C2S_PROD_ADD_TASK = 38;

  S2C_PROD_END_TASK = 39;
  C2S_PROD_END_TASK = 40;

  S2C_PROD_GETRESULT = 41;
  C2S_PROD_GETRESULT = 42;

  S2C_GET_TASK = 43;
  C2S_GET_TASK = 44;

  S2C_PROD_GET_ALL_ADD_TASKS = 45;
  C2S_PROD_GET_ALL_ADD_TASKS = 46;


}

//--------------------LoginServer--------------------
message User{
  optional int32 userId = 1;
  optional string userName = 2;
  optional string userTel = 3;
  optional string userEmail = 4;
  optional string userPassword = 5;
  optional bool userType = 6;
  optional double userMoney = 7;
  optional string userCompany = 8;
  optional string userHome = 9;
  optional string userIp = 10;
  optional string userPos = 11;
}

message C2S_Login{
  int32 loginType = 1; //登录方式 0-->电话登录  1-->邮箱登录 ...
  User user = 2;//用户信息
}

message S2C_Login{
  string msg = 1;
  optional string token = 2;
  optional bool status = 3;
}

message C2S_Register{
  User user = 1;
}

message S2C_Register{
  bool status = 1;
  string msg = 2;
}

//修改密码
message C2S_UpdatePwd {
  User user = 1;
}

message S2C_UpdatePwd{
  bool status = 1;
  string msg = 2;
}

//修改邮箱
message C2S_UpdateEmail {
  User user = 1;
}

message S2C_UpdateEmail{
  bool status = 1;
  string msg = 2;
}

//修改电话
message C2S_UpdateTel {
  User user = 1;
}

message S2C_UpdateTel{
  bool status = 1;
  string msg = 2;
}

//修改全部信息
message C2S_UpdateAll {
  User user = 1;
}

message S2C_UpdateAll{
  bool status = 1;
  string msg = 2;
}

//redis缓存
message Redis_Test{
  string un = 1;
  string pwd = 2;
}


//邮箱绑定
message C2S_BindMailBox {
  User user = 1;
}

message S2C_BindMailBox{
  bool status = 1;
  string msg = 2;
}


//验证邮箱
message C2S_CheckMailBox{
  string code = 1;
  User user = 2;
}

message S2C_CheckMailBox{
  bool status = 1;
  string msg = 2;
}

//--------------------MainServer--------------------

enum TaskProtocl{
  NONE = 0;
  HTTP = 1;
  TCP = 2;
  UDP = 3;
}

message TaskShell{
  string ip = 1;                      //请求IP
  string port = 2;                    //请求Port
  map<string, string> heads = 3;      //报文头信息
  string body = 4;                    //报文体信息
  int32 type = 5;                     //压测方式 1、同一时间  2、持续一段时间
  int32 condition = 6;                //请求先行条件（测试阶段）
  string conditionMsg = 7;            //先行条件内容
  int32 responseType = 8;             //先行条件获取方式1、html 2、json  3、byte数[] 4、responseHead  5、responseSession 6、responseCookie  ...
  string respFind = 9;                //先行条件获取关键字
}

message TaskResult{

}

message Task{
  int32 taskId = 1;                   //任务id
  string taskName = 2;                //任务名
  int32 userId = 3;                   //发布者id
  TaskProtocl taskProtocl = 4;        //任务协议
  map<int32, TaskShell> shell = 5;    //任务脚本
  int32 taskCost = 6;                 //任务所需人数
  repeated int32 taskCons = 7;        //正在测试的用户id
  TaskResult result = 8;              //任务返回结果集
  bool status = 9;                    //任务当前状态  是否可以测试
}

message S_User{
  int32 userId = 1;                   //用户id
  User user = 2;                      //用户元数据
  repeated int32 taskIds = 3;         //用户接受的所有任务Id
  int32 doingTaskId = 4;              //用户正在执行的任务Id  没有则为0
  bool online = 5;                    //用户是否在线
  repeated int32 addTasks = 6;        //用户发布的所有任务Id
}


message KafkaMsg{
  int32 userId = 1;                   //请求者ID
  int32 taskId = 2;                   //任务ID
  int32 shellId = 3;                  //脚本ID
  string ip = 4;                      //被测端IP
  string port = 5;                    //被测端port
  int64 costTime = 6;                 //任务耗时
  string requestMsg = 7;              //任务请求报文
  string responseMsg = 8;             //任务返回报文
  bool success = 9;                   //是否返回成功
}

message TaskConduct{
  int32 taskId = 1;
  repeated int32 userIds = 2;
  map<int32, int32> shellMapping = 3; //用户id：对应执行脚本阶段号
}

message ResponseMsg{
  bool status = 1;
  string msg = 2;
}

message ProdAddTasks{
  repeated Task tasks = 1;
}

message ConsGetTasks{
  repeated Task tasks = 1;
}


message C2S_ProdStartTask{
  int32 taskId = 1;
}

message S2C_ProdStartTask{
  ResponseMsg msg = 1;
}


message C2S_prodAddTask{
  Task task = 1;
}

message S2C_prodAddTask{
  ResponseMsg msg = 1;
}

message C2S_prod_EndTask{
  int32 taskId = 1;
}

message S2C_prod_EndTask{
  ResponseMsg msg = 1;
}

message C2S_prod_GetResult
{
  int32 taskId = 1;
}

message S2C_prod_GetResult
{
  ResponseMsg msg = 1;
  TaskResult taskResult = 2;
}

message C2S_Get_Task
{
  int32 taskId = 1;
}

message S2C_Get_Task
{
  ResponseMsg msg = 1;
  Task task = 2;
}
message C2S_prod_GetAllAddTasks
{
  int32  userId = 1;
}

message S2C_prod_GetAllAddTasks
{
  ProdAddTasks tasks = 1;
  ResponseMsg msg = 2;

}







message S2C_Cons_TakeTask
{
  ResponseMsg msg = 1;
}

message C2S_Cons_TakeTask
{
  int32 taskId = 1;
  int32 userId = 2;
}

message S2C_Cons_StartTask
{
  ResponseMsg msg = 1;
}

message C2S_Cons_StartTask
{
  int32 taskId = 1;
  int32 userId = 2;
}

message S2C_Cons_EndTask
{
  ResponseMsg msg = 1;
}

message C2S_Cons_EndTask
{
  int32 taskId = 1;
  int32 userId = 2;
}

message S2C_Cons_DelTask
{
  ResponseMsg msg = 1;
}

message C2S_Cons_DelTask
{
  int32 taskId = 1;
  int32 userId = 2;
}

message S2C_Cons_AllGetTasks
{
  ResponseMsg msg = 1;
  ConsGetTasks tasks = 2;
}

message C2S_Cons_AllGetTasks
{
  int32 userId = 2;
}

//--------------------ClientServer--------------------